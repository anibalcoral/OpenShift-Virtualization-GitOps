---
- name: Demo 2 - VM Recovery from Data Loss
  hosts: local
  gather_facts: true
  vars:
    guid: "{{ ansible_env.GUID | default('st22j') }}"
    demo_namespace: "workshop-gitops-vms-dev"
    vm_name: "dev-vm-web-01"
    app_name: "workshop-gitops-vms-dev-{{ guid }}"
    argocd_namespace: "openshift-gitops"
    guid: "{{ ansible_env.GUID | default('st22j') }}"

  tasks:
    - name: Display demo introduction
      ansible.builtin.debug:
        msg: |
          Demo 2: VM Recovery from Data Loss (Removing and Recreating VM)
          ==============================================================
          GUID: {{ guid }}
          This demo simulates complete VM loss and shows GitOps recovery

    - name: Check initial VM status
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ demo_namespace }}"
      register: initial_vm_status

    - name: Display initial VM status
      ansible.builtin.debug:
        msg: "Initial VM status: {{ initial_vm_status.resources[0].status.printableStatus | default('Unknown') }}"
      when: initial_vm_status.resources

    - name: Delete VM completely (simulating data loss)
      kubernetes.core.k8s:
        state: absent
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ demo_namespace }}"

    - name: Wait for VM to be completely deleted
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ demo_namespace }}"
      register: vm_deleted_status
      until: vm_deleted_status.resources | length == 0
      retries: 30
      delay: 10

    - name: Display VM deletion
      ansible.builtin.debug:
        msg: "VM has been completely deleted (simulating data loss)"

    - name: Check application status after VM deletion
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "{{ argocd_namespace }}"
      register: app_status_after_deletion

    - name: Display application status
      ansible.builtin.debug:
        msg: |
          Application status after VM deletion:
          Sync: {{ app_status_after_deletion.resources[0].status.sync.status | default('Unknown') }}
          Health: {{ app_status_after_deletion.resources[0].status.health.status | default('Unknown') }}

    - name: Wait for ArgoCD to detect missing resources
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "{{ argocd_namespace }}"
      register: app_drift_status
      until: >
        app_drift_status.resources | length > 0 and
        (
          app_drift_status.resources[0].status is defined and
          app_drift_status.resources[0].status.sync is defined and
          app_drift_status.resources[0].status.sync.status == "OutOfSync"
        )
      retries: 12
      delay: 10

    - name: Display drift detection
      ansible.builtin.debug:
        msg: "ArgoCD detected missing resources - Application is OutOfSync"

    - name: Trigger ArgoCD sync for the application
      kubernetes.core.k8s:
        state: patched
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "openshift-gitops"
        definition:
          spec:
            syncPolicy:
              automated: null
          operation:
            sync:
              revision: "HEAD"
              prune: true
              dryRun: false

    - name: Wait for application to sync
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "{{ argocd_namespace }}"
      register: app_recovery_status
      until: >
        app_recovery_status.resources | length > 0 and
        (
          app_recovery_status.resources[0].status is defined and
          app_recovery_status.resources[0].status.sync is defined and
          app_recovery_status.resources[0].status.sync.status == "Synced"
        )
      retries: 30
      delay: 10

    - name: Display sync completion
      ansible.builtin.debug:
        msg: "Application sync completed - VM should be recovered"

    - name: Wait for VM to be recreated
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ demo_namespace }}"
      register: vm_recovery_status
      until: vm_recovery_status.resources | length > 0
      retries: 30
      delay: 10

    - name: Display VM recovery
      ansible.builtin.debug:
        msg: "VM has been recovered from Git configuration"

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ demo_namespace }}"
      register: final_vm_status
      until: >
        final_vm_status.resources | length > 0 and
        (
          final_vm_status.resources[0].status is defined and
          final_vm_status.resources[0].status.printableStatus == "Running"
        )
      retries: 60
      delay: 10

    - name: Wait for application health to be restored
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "{{ argocd_namespace }}"
      register: final_app_status
      until: >
        final_app_status.resources | length > 0 and
        (
          final_app_status.resources[0].status is defined and
          final_app_status.resources[0].status.health is defined and
          final_app_status.resources[0].status.health.status == "Healthy"
        )
      retries: 30
      delay: 10

    - name: Display demo completion
      ansible.builtin.debug:
        msg: |
          Demo 2 completed successfully!
          ==============================
          VM was completely deleted and recovered from Git
          Final VM status: {{ final_vm_status.resources[0].status.printableStatus | default('Unknown') }}
          Final application health: {{ final_app_status.resources[0].status.health.status | default('Unknown') }}
