---
- name: Install and Configure OpenShift GitOps for Virtualization Workshop
  hosts: local
  gather_facts: true
  vars:
    workshop_namespace_base: "workshop-gitops-vms"
    git_repo_url: "git@github.com:anibalcoral/OpenShift-Virtualization-GitOps-Apps.git"

  tasks:
#    - name: Check if user is logged into OpenShift
#      kubernetes.core.k8s_info:
#        api_version: v1
#        kind: User
#        name: "~"
#      register: current_user
#
#    - name: Display current OpenShift user
#      ansible.builtin.debug:
#        msg: "Connected to OpenShift as: {{ current_user.resources[0].metadata.name }}"

    - name: Install OpenShift GitOps Operator
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: openshift-gitops-operator
            namespace: openshift-operators
          spec:
            channel: latest
            name: openshift-gitops-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace

    - name: Check if GitOps Operator is installed
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: openshift-gitops-operator
        namespace: openshift-operators
      register: gitops_subscription

    - name: Wait for GitOps Operator CSV to be installed
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        namespace: openshift-operators
        label_selectors:
          - "operators.coreos.com/openshift-gitops-operator.openshift-operators"
      register: gitops_csv
      until: gitops_csv.resources | length > 0 and gitops_csv.resources[0].status.phase == "Succeeded"
      retries: 30
      delay: 10

    - name: Wait for ArgoCD instance to be created
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: ArgoCD
        name: openshift-gitops
        namespace: openshift-gitops
      register: argocd_instance
      until:
        - argocd_instance.api_found is defined
        - argocd_instance.api_found
        - argocd_instance.resources is defined
        - argocd_instance.resources | length > 0
      retries: 30
      delay: 10
      failed_when: false

    - name: Apply KubeVirt Pod Health Check Customization to ArgoCD
      kubernetes.core.k8s:
        api_version: argoproj.io/v1alpha1
        kind: ArgoCD
        name: openshift-gitops
        namespace: openshift-gitops
        state: patched
        definition:
          spec:
            extraConfig:
              resource.customizations.health.Pod: |
                hs = { status = "Progressing", message = "Pod is starting" }

                if obj.status and obj.status.phase then
                  local phase = obj.status.phase
                  if phase == "Running" or phase == "Succeeded" then
                    hs = { status = "Healthy", message = "Pod is running" }
                  elseif phase == "Failed" then
                    hs = { status = "Degraded", message = "Pod has failed." }
                  end
                end

                return hs

    - name: Wait for ArgoCD server pod to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: openshift-gitops
        label_selectors:
          - "app.kubernetes.io/name=openshift-gitops-server"
      register: argocd_pods
      until: argocd_pods.resources | length > 0 and argocd_pods.resources[0].status.phase == "Running"
      retries: 30
      delay: 10
      when: argocd_instance.resources is not defined or argocd_instance.resources | length == 0

    - name: Create workshop namespaces for all environments
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ workshop_namespace_base }}-{{ item }}"
            labels:
              workshop: "gitops-ocpvirt"
              environment: "{{ item }}"
      loop:
        - dev
        - hml
        - prd

    - name: Grant ArgoCD permissions to manage workshop resources
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: argocd-workshop-admin
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              name: openshift-gitops-argocd-application-controller
              namespace: openshift-gitops

    - name: Check if SSH private key exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/ocpvirt-gitops"
      register: ssh_private_key

    - name: Create repository secret for SSH access (if SSH key exists)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: workshop-gitops-repo
            namespace: openshift-gitops
            labels:
              argocd.argoproj.io/secret-type: repository
          data:
            type: "{{ 'git' | b64encode }}"
            url: "{{ 'git@github.com:anibalcoral/OpenShift-Virtualization-GitOps-Apps.git' | b64encode }}"
            sshPrivateKey: "{{ lookup('file', ansible_env.HOME + '/.ssh/ocpvirt-gitops') | b64encode }}"
      when: ssh_private_key.stat.exists

    - name: Create ArgoCD Applications for all environments
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: "{{ item.name }}"
            namespace: openshift-gitops
          spec:
            project: default
            source:
              repoURL: "{{ git_repo_url }}"
              targetRevision: "{{ item.revision }}"
              path: "{{ item.path }}"
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ workshop_namespace_base }}-{{ item.env }}"
      loop:
        - name: "workshop-vms-dev"
          env: dev
          revision: vms-dev
          path: overlays/dev
        - name: "workshop-vms-hml"
          env: hml
          revision: vms-hml
          path: overlays/hml
        - name: "workshop-vms-prd"
          env: prd
          revision: main
          path: overlays/prd

    # oc patch applications.argoproj.io workshop-vms-dev -n openshift-gitops --type merge --patch '{"operation":{"sync":{"revision":"HEAD"}}}'
    - name: Force sync ArgoCD Applications via k8s patch
      kubernetes.core.k8s:
        state: patched
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: "{{ item.name }}"
            namespace: openshift-gitops
          operation:
            sync:
              revision: "HEAD"
      loop:
        - name: "workshop-vms-dev"
          env: dev
          revision: vms-dev
        - name: "workshop-vms-hml"
          env: hml
          revision: vms-hml
        - name: "workshop-vms-prd"
          env: prd
          revision: main
