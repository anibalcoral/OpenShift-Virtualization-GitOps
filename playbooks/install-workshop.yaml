---
- name: OpenShift GitOps Workshop - Complete Installation
  hosts: localhost
  gather_facts: true
  vars:
    apps_repo_path: "/opt/OpenShift-Virtualization-GitOps-Apps"
    apps_repo_url: "git@github.com:anibalcoral/OpenShift-Virtualization-GitOps-Apps.git"
    skip_domain_validation: false
    skip_ssh_setup: false
    ssh_key_name: "ocpvirt-gitops"
    auto_commit: true

  tasks:
    - name: Display installation start
      ansible.builtin.debug:
        msg: |
          Starting OpenShift GitOps Workshop Installation
          ==============================================
          This playbook will:
          1. Validate and configure cluster domain
          2. Setup SSH keys for VMs
          3. Install GitOps operator and applications
          4. Validate installation

    - name: Check prerequisites
      ansible.builtin.fail:
        msg: "oc CLI not found. Please install OpenShift CLI."
      when: ansible_facts['env']['PATH'] is not search('oc')

    - name: Validate and configure cluster domain
      ansible.builtin.include_tasks: tasks/validate-cluster-domain-tasks.yaml
      when: not skip_domain_validation

    - name: Setup SSH keys for VMs
      ansible.builtin.include_tasks: tasks/setup-ssh-key-tasks.yaml
      when: not skip_ssh_setup

    - name: Install GitOps operator and applications
      ansible.builtin.include_tasks: tasks/install-gitops-tasks.yaml

    - name: Get ArgoCD server route
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        name: openshift-gitops-server
        namespace: openshift-gitops
      register: argocd_route

    - name: Get ArgoCD admin password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: openshift-gitops-cluster
        namespace: openshift-gitops
      register: argocd_secret

    - name: Get cluster domain
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Ingress
        name: cluster
      register: cluster_ingress

    - name: Set final variables
      ansible.builtin.set_fact:
        argocd_url: "https://{{ argocd_route.resources[0].spec.host }}"
        argocd_password: "{{ argocd_secret.resources[0].data['admin.password'] | b64decode }}"
        cluster_domain: "{{ cluster_ingress.resources[0].spec.domain }}"

    - name: Display installation completion
      ansible.builtin.debug:
        msg: |
          Installation completed successfully!
          ===================================

          Workshop Information:
          ArgoCD URL: {{ argocd_url }}
          ArgoCD Username: admin
          ArgoCD Password: {{ argocd_password }}

          Workshop Applications:
          - workshop-gitops-vms-dev (Development VMs)
          - workshop-gitops-vms-hml (Homologation VMs)
          - workshop-gitops-vms-prd (Production VMs)

          Application URLs (after deployment):
          - Development: https://dev-workshop-gitops-vms.{{ cluster_domain }}
          - Homologation: https://hml-workshop-gitops-vms.{{ cluster_domain }}
          - Production: https://workshop-gitops-vms.{{ cluster_domain }}

          Next steps:
          1. Access ArgoCD UI using the credentials above
          2. Check workshop status: ansible-playbook -i /opt/OpenShift-Virtualization-GitOps/inventory/localhost /opt/OpenShift-Virtualization-GitOps/playbooks/check-workshop-status.yaml
          3. Run demo playbooks in /opt/OpenShift-Virtualization-GitOps/playbooks/ directory
