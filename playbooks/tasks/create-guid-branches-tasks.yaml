---
# Tasks for creating GUID-specific branches in Apps repository

- name: Check if Apps repository exists
  ansible.builtin.stat:
    path: "{{ apps_repo_path }}"
  register: apps_repo_stat

- name: Fail if Apps repository does not exist
  ansible.builtin.fail:
    msg: "Apps repository not found at {{ apps_repo_path }}. Please clone it first."
  when: not apps_repo_stat.stat.exists

- name: Check current branch in Apps repository
  ansible.builtin.command:
    cmd: git branch --show-current
    chdir: "{{ apps_repo_path }}"
  register: current_branch
  changed_when: false

- name: Display current branch
  ansible.builtin.debug:
    msg: "Current branch in Apps repository: {{ current_branch.stdout }}"

- name: Fetch all branches from remote
  ansible.builtin.command:
    cmd: git fetch --all
    chdir: "{{ apps_repo_path }}"
  register: git_fetch
  changed_when: git_fetch.rc == 0

- name: Check if GUID-specific development branch exists locally
  ansible.builtin.command:
    cmd: "git show-ref --verify --quiet refs/heads/{{ dev_branch }}"
    chdir: "{{ apps_repo_path }}"
  register: dev_branch_exists
  failed_when: false
  changed_when: false

- name: Check if GUID-specific homologation branch exists locally
  ansible.builtin.command:
    cmd: "git show-ref --verify --quiet refs/heads/{{ hml_branch }}"
    chdir: "{{ apps_repo_path }}"
  register: hml_branch_exists
  failed_when: false
  changed_when: false

- name: Check if GUID-specific production branch exists locally
  ansible.builtin.command:
    cmd: "git show-ref --verify --quiet refs/heads/{{ prd_branch }}"
    chdir: "{{ apps_repo_path }}"
  register: prd_branch_exists
  failed_when: false
  changed_when: false

- name: Create GUID-specific development branch from main
  ansible.builtin.command:
    cmd: "git checkout -b {{ dev_branch }} origin/main"
    chdir: "{{ apps_repo_path }}"
  register: create_dev_branch
  when: dev_branch_exists.rc != 0
  changed_when: create_dev_branch.rc == 0

- name: Create GUID-specific homologation branch from main
  ansible.builtin.command:
    cmd: "git checkout -b {{ hml_branch }} origin/main"
    chdir: "{{ apps_repo_path }}"
  register: create_hml_branch
  when: hml_branch_exists.rc != 0
  changed_when: create_hml_branch.rc == 0

- name: Create GUID-specific production branch from main
  ansible.builtin.command:
    cmd: "git checkout -b {{ prd_branch }} origin/main"
    chdir: "{{ apps_repo_path }}"
  register: create_prd_branch
  when: prd_branch_exists.rc != 0
  changed_when: create_prd_branch.rc == 0

- name: Switch to development branch
  ansible.builtin.command:
    cmd: "git checkout {{ dev_branch }}"
    chdir: "{{ apps_repo_path }}"
  register: switch_to_dev
  changed_when: switch_to_dev.rc == 0

- name: Push GUID-specific branches to remote
  ansible.builtin.command:
    cmd: "git push origin {{ item }}"
    chdir: "{{ apps_repo_path }}"
  register: push_branches
  failed_when: push_branches.rc != 0 and "already exists" not in push_branches.stderr
  changed_when: push_branches.rc == 0
  loop:
    - "{{ dev_branch }}"
    - "{{ hml_branch }}"
    - "{{ prd_branch }}"

- name: Display branch creation summary
  ansible.builtin.debug:
    msg: |
      GUID-specific branches created successfully:
      - Development: {{ dev_branch }}
      - Homologation: {{ hml_branch }}
      - Production: {{ prd_branch }}