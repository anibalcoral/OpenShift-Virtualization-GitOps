---
# Tasks for validating and configuring cluster domain
- name: Check if Apps repository exists
  ansible.builtin.stat:
    path: "{{ apps_repo_path }}"
  register: apps_repo

- name: Fail if Apps repository not found
  ansible.builtin.fail:
    msg: |
      Apps repository not found at {{ apps_repo_path }}
      Please clone the Apps repository: git clone git@github.com:anibalcoral/OpenShift-Virtualization-GitOps-Apps.git {{ apps_repo_path }}
  when: not apps_repo.stat.exists

- name: Get cluster domain from OpenShift
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_ingress

- name: Set cluster domain variable
  ansible.builtin.set_fact:
    cluster_domain: "{{ cluster_ingress.resources[0].spec.domain }}"

- name: Display detected cluster domain
  ansible.builtin.debug:
    msg: "Detected cluster domain: {{ cluster_domain }}"

- name: Switch to vms-dev branch
  ansible.builtin.shell: git checkout vms-dev
  args:
    chdir: "{{ apps_repo_path }}"
  delegate_to: localhost

- name: Get current domain configuration from dev environment
  ansible.builtin.lineinfile:
    path: "{{ apps_repo_path }}/overlays/dev/kustomization.yaml"
    regexp: 'value: dev-workshop-gitops-vms\.'
    line: "temporary"
    state: present
  register: dev_domain_check

- name: Revert temporary line in dev
  ansible.builtin.lineinfile:
    path: "{{ apps_repo_path }}/overlays/dev/kustomization.yaml"
    regexp: '^temporary$'
    state: absent

- name: Extract current dev domain
  ansible.builtin.shell: |
    grep -oP 'value: dev-workshop-gitops-vms\.\K[^"]*' {{ apps_repo_path }}/overlays/dev/kustomization.yaml || echo ""
  register: current_dev_domain

- name: Get current domain configuration from hml environment
  ansible.builtin.shell: |
    grep -oP 'value: hml-workshop-gitops-vms\.\K[^"]*' {{ apps_repo_path }}/overlays/hml/kustomization.yaml || echo ""
  register: current_hml_domain

- name: Get current domain configuration from prd environment
  ansible.builtin.shell: |
    grep -oP 'value: workshop-gitops-vms\.\K[^"]*' {{ apps_repo_path }}/overlays/prd/kustomization.yaml || echo ""
  register: current_prd_domain

- name: Set expected domain configuration
  ansible.builtin.set_fact:
    expected_dev_domain: "dev-workshop-gitops-vms.{{ cluster_domain }}"
    expected_hml_domain: "hml-workshop-gitops-vms.{{ cluster_domain }}"
    expected_prd_domain: "workshop-gitops-vms.{{ cluster_domain }}"

- name: Display current domain configuration
  ansible.builtin.debug:
    msg: |
      Current domain configuration:
        Development: {{ current_dev_domain.stdout }}
        Homologation: {{ current_hml_domain.stdout }}
        Production: {{ current_prd_domain.stdout }}

- name: Display expected domain configuration
  ansible.builtin.debug:
    msg: |
      Expected domain configuration:
        Development: {{ expected_dev_domain }}
        Homologation: {{ expected_hml_domain }}
        Production: {{ expected_prd_domain }}

- name: Check if update is needed
  ansible.builtin.set_fact:
    update_needed: >-
      {{
        (current_dev_domain.stdout != expected_dev_domain) or
        (current_hml_domain.stdout != expected_hml_domain) or
        (current_prd_domain.stdout != expected_prd_domain)
      }}

- name: Update dev domain configuration
  ansible.builtin.replace:
    path: "{{ apps_repo_path }}/overlays/dev/kustomization.yaml"
    regexp: 'value: dev-workshop-gitops-vms\.[^"]*'
    replace: "value: {{ expected_dev_domain }}"
  when: update_needed

- name: Update hml domain configuration
  ansible.builtin.replace:
    path: "{{ apps_repo_path }}/overlays/hml/kustomization.yaml"
    regexp: 'value: hml-workshop-gitops-vms\.[^"]*'
    replace: "value: {{ expected_hml_domain }}"
  when: update_needed

- name: Update prd domain configuration
  ansible.builtin.replace:
    path: "{{ apps_repo_path }}/overlays/prd/kustomization.yaml"
    regexp: 'value: workshop-gitops-vms\.[^"]*'
    replace: "value: {{ expected_prd_domain }}"
  when: update_needed

- name: Pull latest changes
  ansible.builtin.shell: git pull origin vms-dev
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit

- name: Check if there are changes to commit
  ansible.builtin.shell: git status --porcelain
  args:
    chdir: "{{ apps_repo_path }}"
  register: git_status
  when: update_needed and auto_commit

- name: Commit domain configuration changes
  ansible.builtin.shell: |
    git add . && git commit -m "feat: update cluster domain to {{ cluster_domain }}

    - Update development domain to: {{ expected_dev_domain }}
    - Update homologation domain to: {{ expected_hml_domain }}
    - Update production domain to: {{ expected_prd_domain }}"
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Push changes to vms-dev branch
  ansible.builtin.shell: git push origin vms-dev
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Switch to vms-hml branch
  ansible.builtin.shell: git checkout vms-hml
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Update hml domain in vms-hml branch
  ansible.builtin.replace:
    path: "{{ apps_repo_path }}/overlays/hml/kustomization.yaml"
    regexp: 'value: hml-workshop-gitops-vms\.[^"]*'
    replace: "value: {{ expected_hml_domain }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Check if there are hml changes to commit
  ansible.builtin.shell: git status --porcelain
  args:
    chdir: "{{ apps_repo_path }}"
  register: git_status_hml
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Commit hml changes
  ansible.builtin.shell: |
    git add . && git commit -m "feat: update homologation domain to {{ expected_hml_domain }}"
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != "" and git_status_hml.stdout != ""

- name: Push changes to vms-hml branch
  ansible.builtin.shell: git push origin vms-hml
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != "" and git_status_hml.stdout != ""

- name: Switch to main branch
  ansible.builtin.shell: git checkout main
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Pull latest changes for main
  ansible.builtin.shell: git pull origin main
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Merge vms-hml to main
  ansible.builtin.shell: git merge vms-hml
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Push changes to main branch
  ansible.builtin.shell: git push origin main
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Switch back to vms-dev branch
  ansible.builtin.shell: git checkout vms-dev
  args:
    chdir: "{{ apps_repo_path }}"
  when: update_needed and auto_commit and git_status.stdout != ""

- name: Display final configuration
  ansible.builtin.debug:
    msg: |
      Final configuration:
        Development: https://{{ expected_dev_domain }}
        Homologation: https://{{ expected_hml_domain }}
        Production: https://{{ expected_prd_domain }}

- name: Display success message
  ansible.builtin.debug:
    msg: "{{ 'Domain configuration updated successfully!' if update_needed else 'Domain configuration is already correct!' }}"